name: workflow staging
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Deploy staging'
        required: true
        default: 'latest'
jobs:
  sonarqube-test:
    environment: production
    runs-on: ubuntu-latest
    container:
#      image: kevinpsirius/javadeployspring:v3
      image: kevinpsirius/dind-ci-springboot:v1
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarQube packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          envStaging: ${{ secrets.ENVSTAGING }}
#        run: apk add docker && apk add docker-compose && (dockerd &) && touch $(pwd)/showtime_API/.env && echo "$envStaging" >> $(pwd)/showtime_API/.env  && docker-compose -f $(pwd)/showtime_API/docker-compose-ci.yml up -d  && sleep 15 && cd $(pwd)/showtime_API/ && mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=showtime_API
#        run: sudo chmod 777 -R $(pwd)/showtime_API && sudo touch $(pwd)/showtime_API/.env && echo "$envStaging" >> $(pwd)/showtime_API/.env  && sudo docker-compose -f $(pwd)/showtime_API/docker-compose-ci.yml up -d  && sleep 15 && cd $(pwd)/showtime_API && sudo mvn -B liquibase:dropAll install org.sonarsource.scanner.maven:sonar-maven-plugin:sonar  -Dsonar.projectKey=showtime_API -Dsonar.jacoco.reportPaths=target/jacoco.exec && sudo docker-compose -f $(pwd)/docker-compose-ci.yml down
#        run: chmod 777 -R $(pwd)/showtime_API && sudo touch $(pwd)/showtime_API/.env && echo "$envStaging" >> $(pwd)/showtime_API/.env  && sudo docker-compose -f $(pwd)/showtime_API/docker-compose-ci.yml up -d  && sleep 15 && cd $(pwd)/showtime_API && mvn -B liquibase:dropAll install org.sonarsource.scanner.maven:sonar-maven-plugin:sonar  -Dsonar.projectKey=showtime_API -Dsonar.jacoco.reportPaths=target/jacoco.exec && sudo docker-compose -f $(pwd)/docker-compose-ci.yml down
        run: |
          rm src/main/resources/liquibase.properties 
          mv src/main/resources/liquibase.ci.properties src/main/resources/liquibase.properties 
          rm src/main/resources/application.properties 
          mv src/main/resources/application.ci.properties src/main/resources/application.properties 
          echo 'MAVEN_HOME="/opt/maven"' >> /etc/profile 
          echo 'PATH="$PATH:$MAVEN_HOME/bin"' >> /etc/profile 
          source /etc/profile 
          touch .env 
          echo "$envStaging" >> .env  
          docker-compose -f docker-compose-ci.yml up -d  
          sleep 15 
          docker-compose -f docker-compose-ci.yml up -d 
#          sed -i "s/hostname-postgres/$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' show_time_db)/g" src/main/resources/application.properties
#          sed -i "s/hostname-postgres/$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' show_time_db)/g" src/main/resources/liquibase.properties
#          sed -i "s/hostname-elasticsearch/$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' elasticsearch)/g" src/main/resources/application.properties
#          sed -i "s/hostname-kafka/$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' kafka)/g" src/main/resources/application.properties
#          sed -i "s/hostname-redis/$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' redis_showtime)/g" src/main/resources/application.properties
          sed -i "s/hostname-postgres/localhost/g" src/main/resources/application.properties 
          sed -i "s/hostname-postgres/localhost/g" src/main/resources/liquibase.properties 
          sed -i "s/hostname-elasticsearch/localhost/g" src/main/resources/application.properties 
          sed -i "s/hostname-kafka/localhost/g" src/main/resources/application.properties 
          sed -i "s/hostname-redis/localhost/g" src/main/resources/application.properties
          docker exec -it show_time_db  psql -U postgres  -d dev_showtime  -c ''
          mvn -B liquibase:dropAll install org.sonarsource.scanner.maven:sonar-maven-plugin:sonar  -Dsonar.projectKey=showtime_API -Dsonar.jacoco.reportPaths=target/jacoco.exec

  staging-deploy:
    needs: sonarqube-test
    environment: staging
    runs-on: self-hosted
    container:
      image: kevinpsirius/pipeline_deployment_image:v3
      env:
        sshKey: ${{ secrets.SSH_KEY }}
    steps:
      - name: Generate SSH connection to server with ansible for staging
        run: |
          touch /var/www/html/mypckey.pem &&  chmod 600 /var/www/html/mypckey.pem && echo "$sshKey" >> /var/www/html/mypckey.pem
          cd /var/www/html/playbook && ansible-playbook deploy-dev-api-backend.yml -e "ansible_ssh_timeout=180"
